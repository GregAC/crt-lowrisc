

BUILD_TEMPLATE = """# Automatically generated by @crt//:compiler.bzl.  Do not edit.
package(default_visibility = ["//visibility:public"])

filegroup(
    name = "all",
    srcs = glob(["**"], exclude={exclude}),
)

exports_files({exports})
"""

def _compiler_repository_impl(rctx):
    if rctx.attr.archive and rctx.attr.url:
        fail("Set only one of \"archive\" or \"url\".")

    if rctx.attr.archive:
        rctx.extract(
            archive = rctx.attr.archive,
            stripPrefix = rctx.attr.strip_prefix,
        )
    elif rctx.attr.url:
        rctx.download_and_extract(
            url = rctx.attr.url,
            sha256 = rctx.attr.sha256,
            stripPrefix = rctx.attr.strip_prefix,
        )

    rctx.file(
        "BUILD.bazel",
        BUILD_TEMPLATE.format(
            exclude = json.encode(rctx.attr.exclude),
            exports = json.encode(rctx.attr.exports),
        )
    )

compiler_repository = repository_rule(
    implementation = _compiler_repository_impl,
    attrs = {
        "archive": attr.label(doc="Local path to compiler archive", allow_single_file=True),
        "url": attr.string(doc="URL to compiler archive"),
        "sha256": attr.string(doc="SHA256 digest of the compiler archive"),
        "strip_prefix": attr.string(doc="Strip path prefixes when unarchiving"),
        "exclude": attr.string_list(default=["**/*.html", "**/*.pdf"], doc="Glob of files to exclude from the compiler filegroup"),
        "exports": attr.string_list(default=["bin/**"], doc="Glob of files to export (typical the bin dir)"),
    }
)
